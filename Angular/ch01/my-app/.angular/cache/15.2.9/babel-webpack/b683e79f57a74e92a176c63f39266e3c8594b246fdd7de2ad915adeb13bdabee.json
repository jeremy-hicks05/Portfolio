{"ast":null,"code":"var _class;\nimport { of, mergeMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../products.service\";\nexport class ProductViewService {\n  constructor(productService) {\n    this.productService = productService;\n  }\n  getProduct(id) {\n    return this.productService.getProducts().pipe(mergeMap(products => {\n      if (!this.product) {\n        this.product = products[id];\n      }\n      return of(this.product);\n    }));\n  }\n}\n_class = ProductViewService;\n_class.ɵfac = function ProductViewService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.ProductsService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"mappings":";AAGA,SAAqBA,EAAE,EAAEC,QAAQ,QAAe,MAAM;;;AAGtD,OAAM,MAAOC,kBAAkB;EAG7BC,YAAoBC,cAA+B;IAA/B,mBAAc,GAAdA,cAAc;EAAqB;EAEvDC,UAAU,CAACC,EAAU;IACnB,OAAO,IAAI,CAACF,cAAc,CAACG,WAAW,EAAE,CAACC,IAAI,CAC3CP,QAAQ,CAACQ,QAAQ,IAAG;MAClB,IAAI,CAAC,IAAI,CAACC,OAAO,EAAE;QACjB,IAAI,CAACA,OAAO,GAAGD,QAAQ,CAACH,EAAE,CAAC;;MAE7B,OAAON,EAAE,CAAC,IAAI,CAACU,OAAO,CAAC;IACzB,CAAC,CAAC,CACH;EACH;;SAdWR,kBAAkB;;mBAAlBA,MAAkB;AAAA;;SAAlBA,MAAkB;EAAAS,SAAlBT,MAAkB;AAAA","names":["of","mergeMap","ProductViewService","constructor","productService","getProduct","id","getProducts","pipe","products","product","factory"],"sourceRoot":"","sources":["C:\\Users\\jhicks\\source\\repos\\jeremy-hicks05\\Portfolio\\Angular\\ch01\\my-app\\src\\app\\products\\product-view\\product-view.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ProductsService } from '../products.service'\r\nimport { Product } from '../product';\r\nimport { Observable, of, mergeMap, merge } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class ProductViewService {\r\n  private product: Product | undefined;\r\n\r\n  constructor(private productService: ProductsService) { }\r\n\r\n  getProduct(id: number): Observable<Product> {\r\n    return this.productService.getProducts().pipe(\r\n      mergeMap(products => {\r\n        if (!this.product) {\r\n          this.product = products[id];\r\n        }\r\n        return of(this.product);\r\n      })\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
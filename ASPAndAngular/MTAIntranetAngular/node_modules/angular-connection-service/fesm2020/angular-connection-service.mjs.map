{"version":3,"file":"angular-connection-service.mjs","sources":["../../../projects/connection-service/src/lib/connection-service.service.ts","../../../projects/connection-service/src/lib/connection-service.module.ts","../../../projects/connection-service/src/public_api.ts","../../../projects/connection-service/src/angular-connection-service.ts"],"sourcesContent":["import {EventEmitter, Inject, Injectable, InjectionToken, OnDestroy, Optional} from '@angular/core';\r\nimport {fromEvent, Observable, Subscription, timer} from 'rxjs';\r\nimport {debounceTime, delay, retryWhen, startWith, switchMap, tap} from 'rxjs/operators';\r\nimport * as _ from 'lodash';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n/**\r\n * Instance of this interface is used to report current connection status.\r\n */\r\nexport interface ConnectionState {\r\n  /**\r\n   * \"True\" if browser has network connection. Determined by Window objects \"online\" / \"offline\" events.\r\n   */\r\n  hasNetworkConnection: boolean;\r\n  /**\r\n   * \"True\" if browser has Internet access. Determined by heartbeat system which periodically makes request to heartbeat Url.\r\n   */\r\n  hasInternetAccess: boolean;\r\n}\r\n\r\n/**\r\n * Instance of this interface could be used to configure \"ConnectionService\".\r\n */\r\nexport interface ConnectionServiceOptions {\r\n  /**\r\n   * Controls the Internet connectivity heartbeat system. Default value is 'true'.\r\n   */\r\n  enableHeartbeat?: boolean;\r\n  /**\r\n   * Url used for checking Internet connectivity, heartbeat system periodically makes \"HEAD\" requests to this URL to determine Internet\r\n   * connection status. Default value is \"//internethealthtest.org\".\r\n   */\r\n  heartbeatUrl: string;\r\n  /**\r\n   * Interval used to check Internet connectivity specified in milliseconds. Default value is \"30000\".\r\n   */\r\n  heartbeatInterval: number;\r\n  /**\r\n   * Interval used to retry Internet connectivity checks when an error is detected (when no Internet connection). Default value is \"1000\".\r\n   */\r\n  heartbeatRetryInterval: number;\r\n  /**\r\n   * HTTP method used for requesting heartbeat Url. Default is 'head'.\r\n   */\r\n  requestMethod: 'get' | 'post' | 'head' | 'options';\r\n\r\n}\r\n\r\n/**\r\n * InjectionToken for specifing ConnectionService options.\r\n */\r\nexport const ConnectionServiceOptionsToken: InjectionToken<ConnectionServiceOptions> = new InjectionToken('ConnectionServiceOptionsToken');\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ConnectionService implements OnDestroy {\r\n  private static DEFAULT_OPTIONS: ConnectionServiceOptions = {\r\n    enableHeartbeat: true,\r\n    heartbeatUrl: '//httpstat.us/200',\r\n    heartbeatInterval: 30000,\r\n    heartbeatRetryInterval: 1000,\r\n    requestMethod: 'head'\r\n  };\r\n\r\n  private stateChangeEventEmitter = new EventEmitter<ConnectionState>();\r\n\r\n  private currentState: ConnectionState = {\r\n    hasInternetAccess: false,\r\n    hasNetworkConnection: window.navigator.onLine\r\n  };\r\n  private offlineSubscription!: Subscription;\r\n  private onlineSubscription!: Subscription;\r\n  private httpSubscription!: Subscription;\r\n  private serviceOptions: ConnectionServiceOptions;\r\n\r\n  /**\r\n   * Current ConnectionService options. Notice that changing values of the returned object has not effect on service execution.\r\n   * You should use \"updateOptions\" function.\r\n   */\r\n  get options(): ConnectionServiceOptions {\r\n    return _.clone(this.serviceOptions);\r\n  }\r\n\r\n  constructor(private http: HttpClient, @Inject(ConnectionServiceOptionsToken) @Optional() options: ConnectionServiceOptions) {\r\n    this.serviceOptions = _.defaults({}, options, ConnectionService.DEFAULT_OPTIONS);\r\n\r\n    this.checkNetworkState();\r\n    this.checkInternetState();\r\n  }\r\n\r\n  private checkInternetState() {\r\n\r\n    if (!_.isNil(this.httpSubscription)) {\r\n      this.httpSubscription.unsubscribe();\r\n    }\r\n\r\n    if (this.serviceOptions.enableHeartbeat) {\r\n      this.httpSubscription = timer(0, this.serviceOptions.heartbeatInterval)\r\n        .pipe(\r\n          switchMap(() => this.http[this.serviceOptions.requestMethod](this.serviceOptions.heartbeatUrl, {responseType: 'text'})),\r\n          retryWhen(errors =>\r\n            errors.pipe(\r\n              // log error message\r\n              tap(val => {\r\n                console.error('Http error:', val);\r\n                this.currentState.hasInternetAccess = false;\r\n                this.emitEvent();\r\n              }),\r\n              // restart after 5 seconds\r\n              delay(this.serviceOptions.heartbeatRetryInterval)\r\n            )\r\n          )\r\n        )\r\n        .subscribe(result => {\r\n          this.currentState.hasInternetAccess = true;\r\n          this.emitEvent();\r\n        });\r\n    } else {\r\n      this.currentState.hasInternetAccess = false;\r\n      this.emitEvent();\r\n    }\r\n  }\r\n\r\n  private checkNetworkState() {\r\n    this.onlineSubscription = fromEvent(window, 'online').subscribe(() => {\r\n      this.currentState.hasNetworkConnection = true;\r\n      this.checkInternetState();\r\n      this.emitEvent();\r\n    });\r\n\r\n    this.offlineSubscription = fromEvent(window, 'offline').subscribe(() => {\r\n      this.currentState.hasNetworkConnection = false;\r\n      this.checkInternetState();\r\n      this.emitEvent();\r\n    });\r\n  }\r\n\r\n  private emitEvent() {\r\n    this.stateChangeEventEmitter.emit(this.currentState);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    try {\r\n      this.offlineSubscription.unsubscribe();\r\n      this.onlineSubscription.unsubscribe();\r\n      this.httpSubscription.unsubscribe();\r\n    } catch (e) {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Monitor Network & Internet connection status by subscribing to this observer. If you set \"reportCurrentState\" to \"false\" then\r\n   * function will not report current status of the connections when initially subscribed.\r\n   * @param reportCurrentState Report current state when initial subscription. Default is \"true\"\r\n   */\r\n  monitor(reportCurrentState = true): Observable<ConnectionState> {\r\n    return reportCurrentState ?\r\n      this.stateChangeEventEmitter.pipe(\r\n        debounceTime(300),\r\n        startWith(this.currentState),\r\n      )\r\n      :\r\n      this.stateChangeEventEmitter.pipe(\r\n        debounceTime(300)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Update options of the service. You could specify partial options object. Values that are not specified will use default / previous\r\n   * option values.\r\n   * @param options Partial option values.\r\n   */\r\n  updateOptions(options: Partial<ConnectionServiceOptions>) {\r\n    this.serviceOptions = _.defaults({}, options, this.serviceOptions);\r\n    this.checkInternetState();\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {ConnectionService} from './connection-service.service';\r\nimport {HttpClientModule} from '@angular/common/http';\r\n\r\n@NgModule({\r\n  imports: [HttpClientModule],\r\n  providers: [ConnectionService]\r\n})\r\nexport class ConnectionServiceModule {\r\n}\r\n","/*\r\n * Public API Surface of connection-service\r\n */\r\n\r\nexport * from './lib/connection-service.service';\r\nexport * from './lib/connection-service.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}